// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.ORM.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20250417024553_UpdateSeedData")]
    partial class UpdateSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Carts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 4, 16, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 4, 16, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPercent = 10,
                            Status = 1,
                            SubTotal = 0m,
                            Total = 0m,
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 4, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 4, 16, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPercent = 0,
                            Status = 0,
                            SubTotal = 0m,
                            Total = 0m,
                            UserId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 4, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2025, 4, 16, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPercent = 20,
                            Status = 2,
                            SubTotal = 0m,
                            Total = 0m,
                            UserId = new Guid("00000000-0000-0000-0000-000000000003")
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("13005882-89f7-4cfc-a2bf-92e848f43fba"),
                            CartId = new Guid("20000000-0000-0000-0000-000000000001"),
                            DiscountPercent = 0,
                            ProductId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Quantity = 1,
                            UnitPrice = 9.99m
                        },
                        new
                        {
                            Id = new Guid("0723df67-ea44-4209-a50b-defc6cbb6f4d"),
                            CartId = new Guid("20000000-0000-0000-0000-000000000001"),
                            DiscountPercent = 10,
                            ProductId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Quantity = 1,
                            UnitPrice = 6.49m
                        },
                        new
                        {
                            Id = new Guid("deae7c81-b0fe-4da9-b087-958bc8f33f1b"),
                            CartId = new Guid("20000000-0000-0000-0000-000000000002"),
                            DiscountPercent = 0,
                            ProductId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Quantity = 3,
                            UnitPrice = 2.50m
                        },
                        new
                        {
                            Id = new Guid("a5be6148-2b33-488b-a065-fa0f694ad47d"),
                            CartId = new Guid("20000000-0000-0000-0000-000000000002"),
                            DiscountPercent = 0,
                            ProductId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Quantity = 1,
                            UnitPrice = 7.89m
                        },
                        new
                        {
                            Id = new Guid("35776d72-ff63-4db4-9fdb-eb6fa0a97618"),
                            CartId = new Guid("20000000-0000-0000-0000-000000000003"),
                            DiscountPercent = 20,
                            ProductId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Quantity = 2,
                            UnitPrice = 9.99m
                        },
                        new
                        {
                            Id = new Guid("a046a95b-ab9e-47eb-a906-302821d6ce2d"),
                            CartId = new Guid("20000000-0000-0000-0000-000000000003"),
                            DiscountPercent = 20,
                            ProductId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Quantity = 1,
                            UnitPrice = 6.49m
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Has10PercentDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("Has20PercentDiscount")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 4, 16, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cerveja clara tradicional",
                            Has10PercentDiscount = true,
                            Has20PercentDiscount = false,
                            Name = "Cerveja Lager 600ml",
                            Price = 9.99m,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 4, 16, 12, 40, 0, 0, DateTimeKind.Unspecified),
                            Description = "Refrigerante brasileiro",
                            Has10PercentDiscount = false,
                            Has20PercentDiscount = true,
                            Name = "Guaraná Antarctica 2L",
                            Price = 6.49m,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 4, 16, 12, 50, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sem gás",
                            Has10PercentDiscount = false,
                            Has20PercentDiscount = false,
                            Name = "Água Mineral 500ml",
                            Price = 2.50m,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2025, 4, 16, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Repositor energético",
                            Has10PercentDiscount = true,
                            Has20PercentDiscount = true,
                            Name = "Isotônico PowerUp 700ml",
                            Price = 7.89m,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            CreatedAt = new DateTime(2025, 4, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sem conservantes",
                            Has10PercentDiscount = false,
                            Has20PercentDiscount = false,
                            Name = "Suco Natural Laranja 1L",
                            Price = 8.75m,
                            Status = 2
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 4, 16, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@ambev.com",
                            Password = "$2a$11$h2EUNdIDgEsG9N3nv42TEuFu9Ed/aiOk8d7cKqUK.2fk8pa/aPsUe",
                            Phone = "+5511999990001",
                            Role = "Admin",
                            Status = "Active",
                            Username = "admin.user"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 4, 16, 12, 10, 0, 0, DateTimeKind.Unspecified),
                            Email = "joao@cliente.com",
                            Password = "$2a$11$LDUQB0rCTzo2M/z/6SKBXORLNXGP3tWd1nzbjBBbMfTloMz/k/J8S",
                            Phone = "+5511999990002",
                            Role = "None",
                            Status = "Active",
                            Username = "joao.cliente"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 4, 16, 12, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "maria@vendas.com",
                            Password = "$2a$11$RlmX/nv0rhiddrN2DizMBO4kLFQLpt.DEmwVyIMrAnJQj6X4oQXdO",
                            Phone = "+5511999990003",
                            Role = "Customer",
                            Status = "Active",
                            Username = "vendedor.maria"
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Cart", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.User", null)
                        .WithMany("Carts")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Cart", "Cart")
                        .WithMany("Products")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Cart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
